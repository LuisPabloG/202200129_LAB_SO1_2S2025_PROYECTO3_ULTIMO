apiVersion: v1
kind: ConfigMap
metadata:
  name: locust-config
  namespace: weather-system
data:
  locustfile.py: |
    import random
    from locust import HttpUser, task, between, events
    import logging

    # Configurar logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    # Municipios y climas disponibles
    MUNICIPALITIES = ["mixco", "guatemala", "amatitlan", "chinautla"]
    WEATHERS = ["sunny", "cloudy", "rainy", "foggy"]

    # Carnet: 202200129 ‚Üí Municipio asignado: Chinautla
    ASSIGNED_MUNICIPALITY = "chinautla"

    class WeatherLoadTest(HttpUser):
        """
        Generador de tr√°fico para prueba de carga
        Requisito: Generar JSON con {municipality, temperature, humidity, weather}
        hacia el Ingress Controller
        """
        
        wait_time = between(0.1, 0.5)
        
        def get_municipality(self):
            """
            Distribuci√≥n de municipios:
            - 70% Chinautla (carnet 202200129 ‚Üí municipio asignado)
            - 30% otros (10% Mixco, 10% Guatemala, 10% Amatitl√°n)
            """
            if random.random() < 0.7:
                return "chinautla"
            return random.choice(["mixco", "guatemala", "amatitlan"])
        
        @task
        def send_weather_tweet(self):
            """
            Env√≠a tweet del clima con estructura JSON especificada
            POST /api/weather {municipality, temperature, humidity, weather}
            """
            municipality = self.get_municipality()
            temperature = random.randint(15, 35)
            humidity = random.randint(30, 90)
            weather = random.choice(WEATHERS)
            
            tweet_data = {
                "municipality": municipality,
                "temperature": temperature,
                "humidity": humidity,
                "weather": weather
            }
            
            try:
                response = self.client.post(
                    "/api/weather",
                    json=tweet_data,
                    timeout=10,
                    name="/api/weather"
                )
                
                if response.status_code == 200:
                    logger.debug(f"‚úì {municipality} - {temperature}¬∞C, {humidity}%, {weather}")
                else:
                    logger.warning(f"‚ö† Error {response.status_code}")
                    
            except Exception as e:
                logger.error(f"‚ùå Error: {e}")


    @events.test_start.add_listener
    def on_test_start(environment, **kwargs):
        logger.info("=" * 70)
        logger.info("üöÄ PRUEBA DE CARGA - PROYECTO 3 SOPES1 (EN KUBERNETES)")
        logger.info("üìç Carnet: 202200129 ‚Üí Municipio: CHINAUTLA")
        logger.info("üéØ Objetivo: 10,000+ peticiones con 10 usuarios concurrentes")
        logger.info("üì° Destino: Ingress Controller")
        logger.info("=" * 70)


    @events.test_stop.add_listener
    def on_test_stop(environment, **kwargs):
        logger.info("=" * 70)
        logger.info("‚úì PRUEBA DE CARGA FINALIZADA")
        logger.info(f"üìä Total requests: {environment.stats.total.num_requests}")
        logger.info(f"‚ùå Total fallos: {environment.stats.total.num_failures}")
        logger.info(f"‚è±Ô∏è Tiempo promedio: {environment.stats.total.avg_response_time:.2f}ms")
        logger.info("=" * 70)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust-master
  namespace: weather-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locust-master
  template:
    metadata:
      labels:
        app: locust-master
    spec:
      containers:
      - name: locust
        image: locustio/locust:2.42.0
        ports:
        - containerPort: 8089
          name: web
        - containerPort: 5557
          name: master
        command:
        - /bin/sh
        - -c
        - |
          cp /config/locustfile.py /tmp/locustfile.py && \
          locust -f /tmp/locustfile.py \
            -H http://weather-ingress.weather-system.svc.cluster.local \
            --master \
            --expect-workers 1 \
            --headless \
            -u 10 \
            -r 2 \
            -t 1h
        volumeMounts:
        - name: config
          mountPath: /config
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: config
        configMap:
          name: locust-config

---
apiVersion: v1
kind: Service
metadata:
  name: locust-master
  namespace: weather-system
spec:
  type: LoadBalancer
  selector:
    app: locust-master
  ports:
  - name: web
    port: 8089
    targetPort: 8089
  - name: master
    port: 5557
    targetPort: 5557

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust-worker
  namespace: weather-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locust-worker
  template:
    metadata:
      labels:
        app: locust-worker
    spec:
      containers:
      - name: locust
        image: locustio/locust:2.42.0
        command:
        - /bin/sh
        - -c
        - |
          cp /config/locustfile.py /tmp/locustfile.py && \
          locust -f /tmp/locustfile.py \
            -H http://weather-ingress.weather-system.svc.cluster.local \
            --worker \
            --master-host=locust-master.weather-system.svc.cluster.local \
            --master-port=5557
        volumeMounts:
        - name: config
          mountPath: /config
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: config
        configMap:
          name: locust-config
